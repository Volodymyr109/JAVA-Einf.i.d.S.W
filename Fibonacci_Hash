package Aufgabe_9_4_Standard_Serialisierung;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.HashMap;
import java.io.FileInputStream;

public class Fibonacci {
	//HashMap zum Speichern der Fibonacci Zahlen
	private static HashMap<Integer, Long> fibonacciHash;
	//Name der Datei
	private static final String fileName = "./Fibonatschi.ser";

	// berechnet die Fibonacci-Zahl für eine gegebene Zahl
	public static long fibonacci(int n) throws IOException, ClassNotFoundException {
		//um zu verhindern, dass eine nicht legales Argument weiter gegeben wurde 
		if (n < 0) { // check ob gegebene Zahl < 0 ist - In diesem Fall wird eine IllegalArgumentException geworfen =>
			throw new IllegalArgumentException("n = " + n); // => In diesem Fall wird eine IllegalArgumentException geworfen
		}
		//Falls die HashMap noch nicht initialisiert wurde, wird überprüft, ob die Datei existiert.
		if (fibonacciHash == null) {
			File f = new File(fileName);
			//Falls die Datei noch nicht existiert =>
			if (!f.exists()) { 
				// => DANN werden die anfänglichen Schlüssel-Wert-Paare in der HashMap erstellt (Fibonacci-Zahlen für 0 und 1).
				fibonacciHash = new HashMap<Integer, Long>();
				fibonacciHash.put(0, 0L);
				fibonacciHash.put(1, 1L);
			} else {

				ObjectInputStream in = null;
				try {
					//OIS macht es mцglich das Object zu lesen
					//FIS macht es mцglich den File f zu lesen
					in = new ObjectInputStream(new FileInputStream(f));
					
					fibonacciHash = (HashMap<Integer, Long>) in.readObject();
				} catch (ClassNotFoundException E) {
					throw E;
				} catch (IOException E) {
					throw E;
				} finally {
					in.close();
				}
			}
		}
		//wird auf die Anzahl der Einträge in der HashMap
		int initialSize = fibonacciHash.size();
		// wird aufgerufen, um die Fibonacci-Zahl für n zu berechnen.
		long fib = getFibonacci(n);
		// Überprüfung, ob sich die Anzahl der Einträge in der HashMap fibonacciHash geändert hat
		if (fibonacciHash.size() != initialSize) {
			ObjectOutputStream out = null; //ObjectOutputStream erstellt, um die aktualisierte HashMap in der Datei zu speichern.
			try {
				File f = new File(fileName); //schreibt fibonacciHash in die Datei.
				if (!f.exists()) { // check ob die Datei in die Datei geschrieben werden.
					f.createNewFile(); //dann cheate new file
				}
				out = new ObjectOutputStream(new FileOutputStream(f));
				out.writeObject(fibonacciHash);//schreibt das Object auf f
				out.flush();//Zusicherung, dass die Daten geschrieben werden
			} catch (IOException ex) { //weil OOS das throwen kann
				throw ex;
			} finally {
				out.close();
			}
		}
		return fib; // gib fib
	}

	// berechnet fib
	private static long getFibonacci(int n) {
		if (fibonacciHash.containsKey(n)) { // wenn schon bereits in der HashMap vorhanden ist, wird sie zurückgegeben.
			return fibonacciHash.get(n);
		} else { // anderfalls rechnet fib recursiv
			long nMinus1 = getFibonacci(n - 1);
			long nMinus2 = getFibonacci(n - 2);
			long fibonacci = nMinus1 + nMinus2;
			fibonacciHash.put(n, fibonacci);
			return fibonacci; //fib
		}
	}

	public static void main(String[] args) {

		if (args.length != 1) { // wenn nicht 1 dann ruf printUsage um eine Beschreibung der Verwendung des Programms anzuzeigen
			printUsage();
		} else { // ODER ruf fibonacci
			try {
				System.out.println(fibonacci(Integer.parseInt(args[0])));// Wenn eine IllegalArgumentException auftritt, wird ebenfalls die Methode printUsage aufgerufen.
			} catch (IllegalArgumentException ex) { //Thrown to indicate that a method has been passed an illegal or inappropriate argument.
				printUsage();
				//ClassNotFoundException ist eine geprüfte Ausnahme, die auftritt,
				// wenn eine Anwendung versucht, eine Klasse über ihren vollständig qualifizierten Namen zu laden, und ihre Definition nicht im Klassenpfad finden kann
			} catch (ClassNotFoundException e) { //ClassNotFoundException bei HashMap Serialisierung auftreten können.
				e.printStackTrace();
				//IOException - Signals that an I/O exception of some sort has occurred.
				//This class is the general class of exceptions produced by failed or interrupted I/O operations.
			} catch (IOException e) { //IOException bei HashMap Serialisierung auftreten können.
				e.printStackTrace();
			}
		}
	}
	// print
	private static void printUsage() {
		System.out.println("java calc/Fiboncci n");
		System.out.println("n must be a natural number >= 0");
	}
}
